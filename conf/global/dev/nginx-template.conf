user  nginx;
worker_processes auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile on;

    keepalive_timeout 65;

    # Redirect server
    server {
        # 127.0.0.11 is docker-compose local dns
        resolver 127.0.0.11 ipv6=off;

        # Listen to port 80
        listen 80;

        # On localhost domain
        server_name localhost;

        # Redirect to define hostname.
        server_name_in_redirect off;
        location / {
            return 301 'http://${HOSTNAME}$request_uri';
        }
        location = / {
            return 301 'http://${HOSTNAME}/';
        }
    }

    # This server accepts all traffic to port 80 and passes it to the services.
    server {
        # 127.0.0.11 is docker-compose local dns
        resolver 127.0.0.11 ipv6=off;

        # Listen to port 80
        listen 80;

        # Set variable of services url in docker compose network.
        set $front front:80;
        set $auth auth:80;
        server_name '${HOSTNAME}';

        # Redirect path to api/auth to auth micro service.
        location ${AUTH_URI} {
            rewrite '^/api/auth(.*)$' $1 break;
            proxy_pass http://auth:80;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Scheme $scheme;
            #proxy_set_header X-Script-Name '/api/auth';
            proxy_cookie_path '~^\/$' '/';
            proxy_cookie_path /refresh '/api/auth/refresh';
        }
        # Redirect any other path to front micro service.
        location / {
            rewrite '^/front(.*)$' $1 break;
            proxy_pass http://$front;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Scheme $scheme;
            proxy_set_header X-Script-Name '/';
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection Upgrade;
            proxy_set_header Host $host;
        }

    }
}
